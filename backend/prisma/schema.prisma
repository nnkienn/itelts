// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// ================== GENERATOR & DATASOURCE ==================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================== ENUMS (MỚI) ==================
enum SubmissionStatus {
  PENDING
  AI_GRADED
  TEACHER_GRADED
  REJECTED
}

enum FeedbackSource {
  AI
  TEACHER
}

// ================== MODELS ==================
model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  name         String?
  roleId       Int
  role         Role          @relation(fields: [roleId], references: [id])

  // Quota free cho Writing (MỚI)
  freeUsedWriting Int        @default(0)

  payments     Payment[]
  feedbacks    Feedback[]
  subscription Subscription?
  submissions  Submission[]
}

model Role {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  users User[]
}

model Submission {
  id            Int              @id @default(autoincrement())
  userId        Int
  user          User             @relation(fields: [userId], references: [id])
  
  // GIỮ NGUYÊN để không phá code cũ (chuỗi "WRITING" hiện dùng)
  type          String           // WRITING (sau này muốn enum thì migrate nhẹ)
  contentText   String?
  audioUrl      String?
  
  // Đổi sang enum ổn định (MỚI)
  status        SubmissionStatus  @default(PENDING)
  submittedAt   DateTime          @default(now())

  // Banking đề & metrics
  promptId      Int?
  wordCount     Int?
  aiScore       Float?
  teacherScore  Float?
  gradedAt      DateTime?

  // Audit AI (MỚI)
  modelVersion  String?           // vd "w-2025.08.1"
  aiProvider    String?           // vd "openai:gpt-4o-mini" | "ft:gpt-4o-mini:..."
  aiCostUsd     Float?

  feedbacks     Feedback[]
  
  paymentId     Int?
  payment       Payment?          @relation(fields: [paymentId], references: [id])

  @@index([userId, submittedAt])
  @@index([status, submittedAt])
}

model Feedback {
  id           Int        @id @default(autoincrement())
  submissionId Int
  submission   Submission @relation(fields: [submissionId], references: [id])

  // Phân nguồn AI vs GV (MỚI)
  source       FeedbackSource @default(AI)

  // Cho phép null khi là AI (MỚI)
  userId       Int?
  user         User?       @relation(fields: [userId], references: [id])

  content      String
  createdAt    DateTime   @default(now())

  // Điểm chi tiết (Writing)
  taskResponse Float?
  coherence    Float?
  lexical      Float?
  grammar      Float?

  // Highlight lỗi (JSON nhanh gọn)
  highlights   Json?

  // Audit AI (MỚI) – chỉ set khi source=AI
  modelVersion String?
  aiProvider   String?
  tokensPrompt Int?
  tokensOutput Int?
  costUsd      Float?

  @@index([submissionId, source])
  @@index([userId])
  // Bật khi muốn “mỗi nguồn 1 feedback / submission”
  // @@unique([submissionId, source], name: "uniq_feedback_per_source")
}

model Payment {
  id        Int        @id @default(autoincrement())
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  method    String
  type      String
  amount    Float
  createdAt DateTime   @default(now())

  submissions Submission[]
}

model Subscription {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  startDate DateTime
  endDate   DateTime
  isActive  Boolean
}
