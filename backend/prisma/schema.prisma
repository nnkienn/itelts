// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  name     String?
  role     Role    @relation(fields: [roleId], references: [id])
  roleId   Int

  payments     Payment[] // ✅ fix ở đây
  feedbacks    Feedback[] // ✅ fix ở đây
  subscription Subscription?
  submissions  Submission[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Submission {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  type        String // WRITING / SPEAKING
  status      String     @default("PENDING")
  submittedAt DateTime   @default(now())
  contentText String? // writing
  audioUrl    String? // speaking
  aiScore     Float?
  feedbacks   Feedback[]
  payment     Payment?   @relation(fields: [paymentId], references: [id])
  paymentId   Int?
}

model Feedback {
  id           Int        @id @default(autoincrement())
  submission   Submission @relation(fields: [submissionId], references: [id])
  submissionId Int
  content      String
  createdAt    DateTime   @default(now())
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
}

model Payment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  method    String
  type      String
  amount    Float
  createdAt DateTime @default(now())

  submissions Submission[] // bài nộp thanh toán theo lượt
}

model Subscription {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  startDate DateTime
  endDate   DateTime
  isActive  Boolean
}
